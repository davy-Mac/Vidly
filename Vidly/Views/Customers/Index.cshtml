@model IEnumerable<Vidly.Models.Customer>
@*
    Note: I have set the model for this view to IEnumerable<Customer>.
    this is the simple interface implemented by the list class. since
    in this view we only want to iterate over this list, and we don't
    need any of the operations in the List class (eg Add, Remove, etc),
    it's better to use the IEnumerable interface, which allows us to
    iterate over the list. If in the future, we replace the list with a
    different data structure, as long as it is enumerable, view code
    will remain unchanged.

*@
@{
    ViewBag.Title = "Customers";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<h2>Customers</h2>
<p>
    @Html.ActionLink("New Customer", "New", "Customers", null, new { @class = "btn btn-primary" })
</p>
@if (!Model.Any())
{
    <p>We dont have any customers yet.</p>
}
else
{
    <table id="customers" class="table table-bordered table-hover">
        <thead>
            <tr>
                <th>Customer</th>
                <th>Membership Type</th>
                <th>Delete</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var customer in Model)
            {
                <tr>
                    <td>@Html.ActionLink(customer.Name, "Edit", "Customers", new { id = customer.Id }, null)</td>
                    <td>@customer.MembershipType.Name</td>
                    <td>
                        <button class="btn-link">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
@section scripts
{
    <script>
        $(document).ready(function () {
            $("#customers .js-delete").on("click", function () {
                confirm("Are you sure you want to perform this action DELETE?");
            });
        });
    </script>
}
